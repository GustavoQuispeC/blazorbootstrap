"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[181],{3905:function(n,e,a){a.d(e,{Zo:function(){return f},kt:function(){return v}});var t=a(7294);function o(n,e,a){return e in n?Object.defineProperty(n,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):n[e]=a,n}function r(n,e){var a=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.push.apply(a,t)}return a}function s(n){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){o(n,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(a,e))}))}return n}function i(n,e){if(null==n)return{};var a,t,o=function(n,e){if(null==n)return{};var a,t,o={},r=Object.keys(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||(o[a]=n[a]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)a=r[t],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(n,a)&&(o[a]=n[a])}return o}var c=t.createContext({}),l=function(n){var e=t.useContext(c),a=e;return n&&(a="function"==typeof n?n(e):s(s({},e),n)),a},f=function(n){var e=l(n.components);return t.createElement(c.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var a=n.components,o=n.mdxType,r=n.originalType,c=n.parentName,f=i(n,["components","mdxType","originalType","parentName"]),p=l(a),v=o,u=p["".concat(c,".").concat(v)]||p[v]||d[v]||r;return a?t.createElement(u,s(s({ref:e},f),{},{components:a})):t.createElement(u,s({ref:e},f))}));function v(n,e){var a=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=a.length,s=new Array(r);s[0]=p;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=n,i.mdxType="string"==typeof n?n:o,s[1]=i;for(var l=2;l<r;l++)s[l]=a[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8296:function(n,e,a){a.r(e),a.d(e,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return f},default:function(){return p}});var t=a(7462),o=a(3366),r=(a(7294),a(3905)),s=["components"],i={sidebar_label:"Offcanvas",sidebar_position:4},c="Offcanvas",l={unversionedId:"components/offcanvas",id:"components/offcanvas",isDocsHomePage:!1,title:"Offcanvas",description:"Documentation and examples for BlazorBootstrap Offcanvas.",source:"@site/docs/components/offcanvas.md",sourceDirName:"components",slug:"/components/offcanvas",permalink:"/blazorbootstrap/docs/components/offcanvas",editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/components/offcanvas.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Offcanvas",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Modal",permalink:"/blazorbootstrap/docs/components/modal"},next:{title:"Tooltips",permalink:"/blazorbootstrap/docs/components/tooltips"}},f=[{value:"Usage",id:"usage",children:[],level:2},{value:"Methods",id:"methods",children:[],level:2},{value:"Callback Events",id:"callback-events",children:[],level:2},{value:"Example",id:"example",children:[],level:2},{value:"Screenshot",id:"screenshot",children:[],level:2}],d={toc:f};function p(n){var e=n.components,a=(0,o.Z)(n,s);return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"offcanvas"},"Offcanvas"),(0,r.kt)("p",null,"Documentation and examples for BlazorBootstrap Offcanvas."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Button Color="ButtonColor.Primary" @onclick="(async () => { await ShowOffcanvasAsync(); })">Show Offcanvas</Button>\n\n<Offcanvas @ref="offcanvas">\n  ... design your header and body\n</Offcanvas>\n')),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Show"),(0,r.kt)("td",{parentName:"tr",align:null},"Shows an offcanvas element. Returns to the caller before the offcanvas element has actually been shown (i.e. before the shown event occurs).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Hide"),(0,r.kt)("td",{parentName:"tr",align:null},"Hides an offcanvas element. Returns to the caller before the offcanvas element has actually been hidden (i.e. before the Hidden event occurs).")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"@code {\n    private Offcanvas offcanvas;\n\n    private async Task ShowOffcanvasAsync()\n    {\n        await offcanvas?.ShowAsync();\n    }\n\n    private async Task HideOffcanvasAsync()\n    {\n        await offcanvas?.HideAsync();\n    }\n}\n")),(0,r.kt)("h2",{id:"callback-events"},"Callback Events"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Event"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Showing"),(0,r.kt)("td",{parentName:"tr",align:null},"This event fires immediately when the show instance method is called.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Shown"),(0,r.kt)("td",{parentName:"tr",align:null},"This event is fired when an offcanvas element has been made visible to the user (will wait for CSS transitions to complete).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Hiding"),(0,r.kt)("td",{parentName:"tr",align:null},"This event is fired immediately when the hide method has been called.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Hidden"),(0,r.kt)("td",{parentName:"tr",align:null},"This event is fired when an offcanvas element has been hidden from the user (will wait for CSS transitions to complete).")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Offcanvas @ref="offcanvas"\n           Showing="OnOffcanvasShowingAsync"\n           Shown="OnOffcanvasShownAsync"\n           Hiding="OnOffcanvasHidingAsync"\n           Hidden="OnOffcanvasHiddenAsync">\n\n    ... add offcanvas header and body\n\n</Offcanvas>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private Offcanvas offcanvas;\n\n    private async Task OnOffcanvasShowingAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Showing"); });\n    }\n\n    private async Task OnOffcanvasShownAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Shown"); });\n    }\n\n    private async Task OnOffcanvasHidingAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Hiding"); });\n    }\n\n    private async Task OnOffcanvasHiddenAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Hidden"); });\n    }\n}\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml"},'@using BlazorBootstrap\n@page "/offcanvas"\n\n<h4 class="my-4">Offcanvas Examples</h4>\n<Button Color="ButtonColor.Primary" @onclick="(async () => { await ShowOffcanvasAsync(); })">Show Offcanvas</Button>\n\n<Offcanvas @ref="offcanvas"\n           Showing="OnOffcanvasShowingAsync"\n           Shown="OnOffcanvasShownAsync"\n           Hiding="OnOffcanvasHidingAsync"\n           Hidden="OnOffcanvasHiddenAsync">\n\n    <div class="offcanvas-header">\n        <h5 class="offcanvas-title" id="offcanvasExampleLabel">Offcanvas</h5>\n        <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>\n    </div>\n    <div class="offcanvas-body">\n        <div>\n            Some text as placeholder. In real life you can have the elements you have chosen. Like, text, images, lists, etc.\n        </div>\n        <div class="dropdown mt-3">\n            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown">\n                Dropdown button\n            </button>\n            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">\n                <li><a class="dropdown-item" href="#">Action</a></li>\n                <li><a class="dropdown-item" href="#">Another action</a></li>\n                <li><a class="dropdown-item" href="#">Something else here</a></li>\n            </ul>\n        </div>\n        <div class="mt-3">\n            <Button Color="ButtonColor.Primary" @onclick="(async () => { await HideOffcanvasAsync(); })">Hide Offcanvas</Button>\n        </div>\n    </div>\n\n</Offcanvas>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private Offcanvas offcanvas;\n\n    private async Task ShowOffcanvasAsync()\n    {\n        await offcanvas?.ShowAsync();\n    }\n\n    private async Task HideOffcanvasAsync()\n    {\n        await offcanvas?.HideAsync();\n    }\n\n    private async Task OnOffcanvasShowingAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Showing"); });\n    }\n\n    private async Task OnOffcanvasShownAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Shown"); });\n    }\n\n    private async Task OnOffcanvasHidingAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Hiding"); });\n    }\n\n    private async Task OnOffcanvasHiddenAsync()\n    {\n        await Task.Run(() => { Console.WriteLine("Event: Hidden"); });\n    }\n}\n')),(0,r.kt)("h2",{id:"screenshot"},"Screenshot"),(0,r.kt)("img",{src:"https://i.imgur.com/J1mcowH.jpg",alt:"BlazorBootstrap: Offcanvas Example"}))}p.isMDXComponent=!0}}]);