"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[7084],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(p,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={title:"Blazor Preload Component",description:"Indicate the loading state of a page with Blazor Bootstrap preload component.",image:"https://i.imgur.com/UV6zPTQ.png",sidebar_label:"Preload",sidebar_position:17},l="Blazor Preload",i={unversionedId:"components/preload",id:"components/preload",title:"Blazor Preload Component",description:"Indicate the loading state of a page with Blazor Bootstrap preload component.",source:"@site/docs/05-components/preload.md",sourceDirName:"05-components",slug:"/components/preload",permalink:"/components/preload",draft:!1,editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/05-components/preload.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{title:"Blazor Preload Component",description:"Indicate the loading state of a page with Blazor Bootstrap preload component.",image:"https://i.imgur.com/UV6zPTQ.png",sidebar_label:"Preload",sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Placeholders",permalink:"/components/placeholders"},next:{title:"Progress",permalink:"/components/progress"}},p={},c=[{value:"Parameters",id:"parameters",level:2},{value:"Preload Service",id:"preload-service",level:2},{value:"Methods",id:"methods",level:3},{value:"Global preload service for the application",id:"global-preload-service-for-the-application",level:2},{value:"Change spinner color",id:"change-spinner-color",level:2}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"blazor-preload"},"Blazor Preload"),(0,a.kt)("p",null,"Indicate the loading state of a page with Blazor Bootstrap preload component."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Things to know when using the ",(0,a.kt)("inlineCode",{parentName:"strong"},"Preload")," component:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Add the ",(0,a.kt)("inlineCode",{parentName:"li"},"Preload")," component to your ",(0,a.kt)("strong",{parentName:"li"},"current page")," or your ",(0,a.kt)("strong",{parentName:"li"},"layout page"),"."),(0,a.kt)("li",{parentName:"ul"},"Inject ",(0,a.kt)("inlineCode",{parentName:"li"},"PreloadService")),(0,a.kt)("li",{parentName:"ul"},"Call ",(0,a.kt)("inlineCode",{parentName:"li"},"PreloadService.Show()")," before you make any call to the API."),(0,a.kt)("li",{parentName:"ul"},"Call ",(0,a.kt)("inlineCode",{parentName:"li"},"PreloadService.Hide()")," after you get the response from the API.")),(0,a.kt)("img",{src:"https://i.imgur.com/UV6zPTQ.png",alt:"Blazor Bootstrap: Blazor Preload Component - Default"}),(0,a.kt)("h2",{id:"parameters"},"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Descritpion"),(0,a.kt)("th",{parentName:"tr",align:null},"Required"),(0,a.kt)("th",{parentName:"tr",align:null},"Version Added"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ChildContent"),(0,a.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,a.kt)("td",{parentName:"tr",align:null},"null"),(0,a.kt)("td",{parentName:"tr",align:null},"Specifies the content to be rendered inside this."),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"1.1.0")))),(0,a.kt)("h2",{id:"preload-service"},"Preload Service"),(0,a.kt)("h3",{id:"methods"},"Methods"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null},"Added Version"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Show(SpinnerColor spinnerColor = SpinnerColor.Light)"),(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},"Shows the preload."),(0,a.kt)("td",{parentName:"tr",align:null},"1.1.0")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Hide()"),(0,a.kt)("td",{parentName:"tr",align:null},"void"),(0,a.kt)("td",{parentName:"tr",align:null},"Hides the preload."),(0,a.kt)("td",{parentName:"tr",align:null},"1.1.0")))),(0,a.kt)("h2",{id:"global-preload-service-for-the-application"},"Global preload service for the application"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add the ",(0,a.kt)("inlineCode",{parentName:"li"},"Preload")," component in ",(0,a.kt)("strong",{parentName:"li"},"MainLayout.razor")," page as shown below.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@using BlazorBootstrap\n.\n.\n\n... MainLayout.razor code goes here ...\n\n.\n.\n<Preload />\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Inject ",(0,a.kt)("inlineCode",{parentName:"li"},"PreloadService"),", then call the ",(0,a.kt)("inlineCode",{parentName:"li"},"Show()")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Hide()")," methods before and after the Service/API, respectively, as shown below.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n\n    [Inject] protected PreloadService PreloadService { get; set; }\n\n    private void GetEmployees()\n    {\n        try\n        {\n            PreloadService.Show();\n\n            // call the service/api to get the employees\n        }\n        catch\n        {\n            // handle exception\n        }\n        finally\n        {\n            PreloadService.Hide();\n        }\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/preload#global-preload-service-for-the-application"},"See Preload demo here.")),(0,a.kt)("h2",{id:"change-spinner-color"},"Change spinner color"),(0,a.kt)("p",null,"Change the default spinner color by passing the ",(0,a.kt)("inlineCode",{parentName:"p"},"SpinnerColor")," enum to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Show(...)")," method. In the below example, we are using a ",(0,a.kt)("a",{parentName:"p",href:"/components/preload#global-preload-service-for-the-application"},"global preload service"),", as shown in the above section."),(0,a.kt)("img",{src:"https://i.imgur.com/5PVt5bX.png",alt:"Blazor Bootstrap: Blazor Preload Component - Change spinner color"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cshml",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},'<Button Color="ButtonColor.Primary" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Primary)">Primary Spinner</Button>\n<Button Color="ButtonColor.Secondary" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Secondary)">Secondary Spinner</Button>\n<Button Color="ButtonColor.Success" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Success)">Success Spinner</Button>\n<Button Color="ButtonColor.Danger" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Danger)">Danger Spinner</Button>\n<Button Color="ButtonColor.Warning" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Warning)">Warning Spinner</Button>\n<Button Color="ButtonColor.Info" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Info)">Info Spinner</Button>\n<Button Color="ButtonColor.Light" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Light)">Light Spinner</Button>\n<Button Color="ButtonColor.Dark" @onclick="async () => await ShowSpinnerAsync(SpinnerColor.Dark)">Dark Spinner</Button>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{} showLineNumbers","{}":!0,showLineNumbers:!0},"@code {\n    [Inject] protected PreloadService PreloadService { get; set; }\n\n    private async Task ShowSpinnerAsync(SpinnerColor spinnerColor)\n    {\n        PreloadService.Show(spinnerColor);\n\n        await Task.Delay(3000); // call the service/api\n\n        PreloadService.Hide();\n    }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://demos.blazorbootstrap.com/preload#change-spinner-color"},"See Preload demo here.")))}d.isMDXComponent=!0}}]);