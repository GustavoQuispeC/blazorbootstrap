"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[7554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),d=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),g=d(n),u=r,c=g["".concat(m,".").concat(u)]||g[u]||p[u]||i;return n?a.createElement(c,l(l({ref:t},s),{},{components:n})):a.createElement(c,l({ref:t},s))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=g;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},8888:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_label:"Grid",sidebar_position:6},l="Grid",o={unversionedId:"components/grid",id:"components/grid",title:"Grid",description:"Use BlazorBootstrap's grid component to display tabular data from the data source. And it supports client-side and server-side paging & sorting.",source:"@site/docs/components/grid.md",sourceDirName:"components",slug:"/components/grid",permalink:"/docs/components/grid",draft:!1,editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/components/grid.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Grid",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Confirm Dialog",permalink:"/docs/components/confirmation-dialog"},next:{title:"Modal",permalink:"/docs/components/modal"}},m={},d=[{value:"Grid Parameters",id:"grid-parameters",level:2},{value:"GridColumn Parameters",id:"gridcolumn-parameters",level:2},{value:"Examples",id:"examples",level:2},{value:"Client side filtering",id:"client-side-filtering",level:3},{value:"Client side paging",id:"client-side-paging",level:3},{value:"Client side sorting",id:"client-side-sorting",level:3},{value:"Client side filtering, paging, and sorting",id:"client-side-filtering-paging-and-sorting",level:3},{value:"Set default filter",id:"set-default-filter",level:3},{value:"Disable specific column filter",id:"disable-specific-column-filter",level:3},{value:"Increase filter textbox width",id:"increase-filter-textbox-width",level:3},{value:"Server side filtering, paging and sorting",id:"server-side-filtering-paging-and-sorting",level:3},{value:"Set default sorting",id:"set-default-sorting",level:3},{value:"Disable specific column sorting",id:"disable-specific-column-sorting",level:3},{value:"Header text alignment",id:"header-text-alignment",level:3},{value:"Cell alignment",id:"cell-alignment",level:3},{value:"Cell formating",id:"cell-formating",level:3},{value:"Cell nowrap",id:"cell-nowrap",level:3},{value:"Pagination alignment",id:"pagination-alignment",level:3},{value:"Empty data",id:"empty-data",level:3}],s={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"grid"},"Grid"),(0,r.kt)("p",null,"Use BlazorBootstrap's grid component to display tabular data from the data source. And it supports client-side and server-side paging & sorting."),(0,r.kt)("img",{src:"https://i.imgur.com/36RsWZ3.png",alt:"Blazor Bootstrap: Grid Component"}),(0,r.kt)("h2",{id:"grid-parameters"},"Grid Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Descritpion"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AllowFiltering"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the grid filtering."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AllowPaging"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the grid paging."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"AllowSorting"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the grid sorting."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ChildContent"),(0,r.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the content to be rendered inside the grid."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"EmptyText"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Shows text on no records."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"No records to display")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DataProvider"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GridDataProviderDelegate<TItem>")),(0,r.kt)("td",{parentName:"tr",align:null},"DataProvider is for items to render. The provider should always return an instance of ",(0,r.kt)("inlineCode",{parentName:"td"},"GridDataProviderResult"),", and ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," is not allowed."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PageSize"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the page size of the grid."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PaginationAlignment"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the pagination alignment."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment.Start"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Responsive"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets a value indicating whether Grid is responsive."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sortable"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets whether end-users can sort data by the column's values."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"true")))),(0,r.kt)("h2",{id:"gridcolumn-parameters"},"GridColumn Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Descritpion"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ChildContent"),(0,r.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies the content to be rendered inside the grid column."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Filterable"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable or disable the filter on a specific column. The filter is enabled or disabled based on the grid ",(0,r.kt)("inlineCode",{parentName:"td"},"AllowFiltering")," parameter."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FilterOperator"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"FilterOperator")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the filter operator."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Assigend based on the property type.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FilterTextboxWidth"),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the filter textbox width in pixels."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"FilterValue"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the filter value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HeaderText"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the table column header."),(0,r.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HeaderTextAlignment"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the header text alignment."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment.Start"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"IsDefaultSortColumn"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the default sort column."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PropertyName"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the property name. This is required when ",(0,r.kt)("inlineCode",{parentName:"td"},"AllowFiltering")," is true."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Sortable"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable or disable the sorting on a specific column. The sorting is enabled or disabled based on the grid ",(0,r.kt)("inlineCode",{parentName:"td"},"AllowSorting")," parameter."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SortDirection"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SortDirection")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the default sort direction of a column."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SortDirection.None"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SortKeySelector"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Expression<Func<TItem, IComparable>>")),(0,r.kt)("td",{parentName:"tr",align:null},"Expression used for sorting."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SortString"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the column sort string. This string is passed to the backend/API for sorting. And it is ignored for client-side sorting."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TextAlignment"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment")),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets the text alignment."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Alignment.Start"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TextNoWrap"),(0,r.kt)("td",{parentName:"tr",align:null},"bool"),(0,r.kt)("td",{parentName:"tr",align:null},"Gets or sets text nowrap."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"false")))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"client-side-filtering"},"Client side filtering"),(0,r.kt)("p",null,"For filtering, ",(0,r.kt)("inlineCode",{parentName:"p"},"AllowFiltering")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PropertyName")," parameters are required.\nAdd ",(0,r.kt)("inlineCode",{parentName:"p"},'AllowFiltering="true"')," parameter to Grid and ",(0,r.kt)("inlineCode",{parentName:"p"},"PropertyName")," parameter to all the GridColumns."),(0,r.kt)("img",{src:"https://i.imgur.com/Clr8W11.png",alt:"Blazor Bootstrap: Grid Component - Client side filtering"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1,2,5,8,11,14}","{1,2,5,8,11,14}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" PropertyName="Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" PropertyName="Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" PropertyName="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" PropertyName="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" PropertyName="IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#client-side-filtering"},"See demo here")),(0,r.kt)("h3",{id:"client-side-paging"},"Client side paging"),(0,r.kt)("p",null,"For paging, ",(0,r.kt)("inlineCode",{parentName:"p"},"AllowPaging")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PageSize")," parameters are required.\nAdd ",(0,r.kt)("inlineCode",{parentName:"p"},'AllowPaging="true"')," and ",(0,r.kt)("inlineCode",{parentName:"p"},'PageSize="20"')," parameters to the Grid. ",(0,r.kt)("inlineCode",{parentName:"p"},"PageSize")," parameter is optional. "),(0,r.kt)("img",{src:"https://i.imgur.com/WXwUqgX.png",alt:"Blazor Bootstrap: Grid Component - Client side paging"}),(0,r.kt)("admonition",{title:"INFO",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The default page size is 10.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1}","{1}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowPaging="true" PageSize="5" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 113, Name = "Merlin", Designation = "Senior Consultant", DOJ = new DateOnly(1989, 10, 2), IsActive = true },\n            new Employee1 { Id = 117, Name = "Sharna", Designation = "Data Analyst", DOJ = new DateOnly(1994, 5, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n            new Employee1 { Id = 111, Name = "Glenda", Designation = "Data Engineer", DOJ = new DateOnly(1994, 1, 12), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#client-side-paging"},"See demo here")),(0,r.kt)("h3",{id:"client-side-sorting"},"Client side sorting"),(0,r.kt)("p",null,"For sorting, ",(0,r.kt)("inlineCode",{parentName:"p"},"AllowSorting")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SortKeySelector")," parameters are required.\nAdd ",(0,r.kt)("inlineCode",{parentName:"p"},'AllowSorting="true"')," parameter to Grid and ",(0,r.kt)("inlineCode",{parentName:"p"},"SortKeySelector")," to all the GridColumns."),(0,r.kt)("img",{src:"https://i.imgur.com/wkIWG5S.png",alt:"Blazor Bootstrap: Grid Component - Client side sorting"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1,2,5,8,11,14}","{1,2,5,8,11,14}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowSorting="true" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="item => item.Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="item => item.Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="item => item.Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="item => item.DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="item => item.IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#client-side-sorting"},"See demo here")),(0,r.kt)("h3",{id:"client-side-filtering-paging-and-sorting"},"Client side filtering, paging, and sorting"),(0,r.kt)("img",{src:"https://i.imgur.com/wZ0cQiO.png",alt:"Blazor Bootstrap: Grid Component - Client side filtering, paging, and sorting"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1,2,5,8,11,14}","{1,2,5,8,11,14}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" PropertyName="Id" SortKeySelector="item => item.Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" PropertyName="Name" SortKeySelector="item => item.Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" PropertyName="Designation" SortKeySelector="item => item.Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" PropertyName="DOJ" SortKeySelector="item => item.DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" PropertyName="IsActive" SortKeySelector="item => item.IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 113, Name = "Merlin", Designation = "Senior Consultant", DOJ = new DateOnly(1989, 10, 2), IsActive = true },\n            new Employee1 { Id = 117, Name = "Sharna", Designation = "Data Analyst", DOJ = new DateOnly(1994, 5, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n            new Employee1 { Id = 111, Name = "Glenda", Designation = "Data Engineer", DOJ = new DateOnly(1994, 1, 12), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#client-side-filtering-paging-sorting"},"See demo here")),(0,r.kt)("h3",{id:"set-default-filter"},"Set default filter"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"FilterOperator")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterValue")," parameters are required to set the default filter. "),(0,r.kt)("img",{src:"https://i.imgur.com/jog5EA4.png",alt:"Blazor Bootstrap: Grid Component - Set default filter"}),(0,r.kt)("admonition",{title:"TIP",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can set the default filter on more than one GridColumn.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{2}","{2}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" PropertyName="Id" FilterOperator="FilterOperator.GreaterThanOrEquals" FilterValue="105">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" PropertyName="Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" PropertyName="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" PropertyName="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" PropertyName="IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#set-default-filter"},"See demo here")),(0,r.kt)("h3",{id:"disable-specific-column-filter"},"Disable specific column filter"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Filterable")," parameter is required to disable the filter on a specific column.\nAdd ",(0,r.kt)("inlineCode",{parentName:"p"},'Filterable="false"')," parameter to GridColumn."),(0,r.kt)("img",{src:"https://i.imgur.com/oGeA4VO.png",alt:"Blazor Bootstrap: Grid Component - Disable specific column filter"}),(0,r.kt)("admonition",{title:"INFO",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},'Filterable="true"')," on all the columns if the ",(0,r.kt)("inlineCode",{parentName:"p"},"AllowFiltering")," parameter is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," on the grid.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{14}","{14}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" Filterable="false">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" PropertyName="Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" PropertyName="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" PropertyName="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" Filterable="false">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#disable-specific-column-filter"},"See demo here")),(0,r.kt)("h3",{id:"increase-filter-textbox-width"},"Increase filter textbox width"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterTextboxWidth")," parameter to the GridColumn to increase or decrease the filter textbox width, ",(0,r.kt)("inlineCode",{parentName:"p"},"FilterTextboxWidth")," parameter is optional."),(0,r.kt)("img",{src:"https://i.imgur.com/eWXiHr0.png",alt:"Blazor Bootstrap: Grid Component - Increase filter textbox width"}),(0,r.kt)("admonition",{title:"NOTE",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Filter textbox width measured in pixels.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{2,5,8}","{2,5,8}":!0},'<Grid TItem="Employee3" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" Responsive="true">\n    <GridColumn TItem="Employee3" HeaderText="Id" PropertyName="Id" FilterTextboxWidth="80">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="First Name" PropertyName="FirstName" FilterTextboxWidth="80">\n        @context.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Last Name" PropertyName="LastName" FilterTextboxWidth="80">\n        @context.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Email" PropertyName="Email">\n        @context.Email\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Company" TextNoWrap="true" PropertyName="Company">\n        @context.Company\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Designation" TextNoWrap="true" PropertyName="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="DOJ" PropertyName="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Salary" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End" PropertyName="Salary" FilterTextboxWidth="80">\n        @context.Salary.ToString("N2")\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Active" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" PropertyName="IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee3> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee3>\n        {\n            new Employee3 { Id = 107, FirstName = "Alice", LastName = "Reddy", Email = "alice@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), Salary = 7700, IsActive = true },\n            new Employee3 { Id = 103, FirstName = "Bob", LastName = "Roy", Email = "bob@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), Salary = 19000, IsActive = true },\n            new Employee3 { Id = 106, FirstName = "John", LastName = "Papa", Email = "john@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), Salary = 12000, IsActive = true },\n            new Employee3 { Id = 104, FirstName = "Pop", LastName = "Two", Email = "pop@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), Salary = 19000, IsActive = false },\n            new Employee3 { Id = 105, FirstName = "Ronald", LastName = "Dire", Email = "ronald@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), Salary = 16500.50M, IsActive = true },\n            new Employee3 { Id = 102, FirstName = "Line", LastName = "K", Email = "line@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), Salary = 24000, IsActive = true },\n            new Employee3 { Id = 101, FirstName = "Daniel", LastName = "Potter", Email = "daniel@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), Salary = 21000, IsActive = true },\n            new Employee3 { Id = 108, FirstName = "Zayne", LastName = "Simmons", Email = "zayne@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), Salary = 17850, IsActive = true },\n            new Employee3 { Id = 109, FirstName = "Isha", LastName = "Davison", Email = "isha@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), Salary = 8000, IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee3>> EmployeesDataProvider(GridDataProviderRequest<Employee3> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#increase-filter-textbox-width"},"See demo here")),(0,r.kt)("h3",{id:"server-side-filtering-paging-and-sorting"},"Server side filtering, paging and sorting"),(0,r.kt)("img",{src:"https://i.imgur.com/xHVXTew.png",alt:"Blazor Bootstrap: Grid Component - Server side filtering, paging and sorting"}),(0,r.kt)("admonition",{title:"NOTE",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"For server-side sorting, we need the ",(0,r.kt)("inlineCode",{parentName:"p"},"SortString")," parameter on GridColumn along with the ",(0,r.kt)("inlineCode",{parentName:"p"},"SortKeySelector")," parameter.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Grid TItem="Employee" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" Responsive="true">\n    <GridColumn TItem="Employee" HeaderText="Id" PropertyName="Id" SortString="Id" SortKeySelector="item => item.Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="First Name" PropertyName="FirstName" SortString="FirstName" SortKeySelector="item => item.FirstName">\n        @context.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Last Name" PropertyName="LastName" SortString="LastName" SortKeySelector="item => item.LastName">\n        @context.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Designation" PropertyName="Designation" SortString="Designation" SortKeySelector="item => item.Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Salary" PropertyName="Salary" SortString="Salary" SortKeySelector="item => item.Salary">\n        @context.Salary\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="DOJ" PropertyName="DOJ" SortString="DOJ" SortKeySelector="item => item.DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Active" PropertyName="IsActive" SortString="IsActive" SortKeySelector="item => item.IsActive">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs",metastring:"{11}","{11}":!0},'@code {\n    [Inject] public IEmployeeService _employeeService { get; set; }\n\n    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)\n    {\n        string sortString = "";\n        SortDirection sortDirection = SortDirection.None;\n\n        if (request.Sorting is not null && request.Sorting.Any())\n        {\n            // Note: Multi column sorting is not supported at this moment\n            sortString = request.Sorting[0].SortString;\n            sortDirection = request.Sorting[0].SortDirection;\n        }\n        var result = _employeeService.GetEmployees(request.Filters, request.PageNumber, request.PageSize, sortString, sortDirection);\n        return await Task.FromResult(new GridDataProviderResult<Employee> { Data = result.Item1, TotalCount = result.Item2 });\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#server-side-filtering-paging-sorting"},"See demo here")),(0,r.kt)("h3",{id:"set-default-sorting"},"Set default sorting"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"IsDefaultSortColumn")," parameter is required to set the default sorting. Add ",(0,r.kt)("inlineCode",{parentName:"p"},'IsDefaultSortColumn="true"')," parameter to the GridColumn.\nThe default sort direction will be ",(0,r.kt)("strong",{parentName:"p"},"ascending"),". To change the default sorting of a column, add ",(0,r.kt)("inlineCode",{parentName:"p"},'SortDirection="SortDirection.Descending"')," to the GridColumn."),(0,r.kt)("img",{src:"https://i.imgur.com/WxULPS6.png",alt:"Blazor Bootstrap: Grid Component - Set default sorting"}),(0,r.kt)("admonition",{title:"INFO",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If more than one GridColumn has the ",(0,r.kt)("inlineCode",{parentName:"p"},"IsDefaultSortColumn")," paramter, it will pick the first column as the default sorting column.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{5}","{5}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowSorting="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="@(item => item.Id)">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="@(item => item.Name)" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" SortKeySelector="@(item => item.Designation)">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="@(item => item.DOJ)">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="@(item => item.IsActive)">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#set-default-sorting"},"See demo here")),(0,r.kt)("h3",{id:"disable-specific-column-sorting"},"Disable specific column sorting"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'Sortable="false"')," parameter the GridColumn to disable the sorting. "),(0,r.kt)("admonition",{title:"INFO",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"If sorting is disabled, then the ",(0,r.kt)("inlineCode",{parentName:"p"},"SortKeySelector")," parameter is not required.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{8}","{8}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" AllowSorting="true">\n    <GridColumn TItem="Employee1" HeaderText="Id" SortKeySelector="@(item => item.Id)">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name" SortKeySelector="@(item => item.Name)">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" Sortable="false">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" SortKeySelector="@(item => item.DOJ)">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" SortKeySelector="@(item => item.IsActive)">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#disable-specific-column-sorting"},"See demo here")),(0,r.kt)("h3",{id:"header-text-alignment"},"Header text alignment"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderTextAlignment")," parameter to change the header column alignment.\nBy default, ",(0,r.kt)("inlineCode",{parentName:"p"},"HeaderTextAlignment")," is set to Alignment.Start. Other options you can use are ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.Center")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.End"),"."),(0,r.kt)("img",{src:"https://i.imgur.com/gWgIESD.png",alt:"Blazor Bootstrap: Grid Component - Header text alignment"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{8,11,14}","{8,11,14}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee1" HeaderText="Id" HeaderTextAlignment="Alignment.Center">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation" HeaderTextAlignment="Alignment.Center">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ" HeaderTextAlignment="Alignment.Center">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active" HeaderTextAlignment="Alignment.End">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#header-text-alignment"},"See demo here")),(0,r.kt)("h3",{id:"cell-alignment"},"Cell alignment"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"TextAlignment")," parameter to change the cell data alignment.\nBy default, ",(0,r.kt)("inlineCode",{parentName:"p"},"TextAlignment")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.Start"),". Other options you can use are ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.Center")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.End"),"."),(0,r.kt)("img",{src:"https://i.imgur.com/0OKp4yd.png",alt:"Blazor Bootstrap: Grid Component - Cell alignment"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{11,14}","{11,14}":!0},'<Grid TItem="Employee2" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee2" HeaderText="Id" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Employee Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Salary" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">\n        @context.Salary\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Active" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee2> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee2>\n        {\n            new Employee2 { Id = 107, Name = "Alice", Designation = "AI Engineer", Salary = 7700, IsActive = true },\n            new Employee2 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", Salary = 19000, IsActive = true },\n            new Employee2 { Id = 106, Name = "John", Designation = "Data Engineer", Salary = 12000, IsActive = true },\n            new Employee2 { Id = 104, Name = "Pop", Designation = "Associate Architect", Salary = 19000, IsActive = false },\n            new Employee2 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", Salary = 16500.50M, IsActive = true },\n            new Employee2 { Id = 102, Name = "Line", Designation = "Architect", Salary = 24000, IsActive = true },\n            new Employee2 { Id = 101, Name = "Daniel", Designation = "Architect", Salary = 21000, IsActive = true },\n            new Employee2 { Id = 108, Name = "Zayne", Designation = "Data Analyst", Salary = 17850, IsActive = true },\n            new Employee2 { Id = 109, Name = "Isha", Designation = "App Maker", Salary = 8000, IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee2>> EmployeesDataProvider(GridDataProviderRequest<Employee2> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#cell-alignment"},"See demo here")),(0,r.kt)("h3",{id:"cell-formating"},"Cell formating"),(0,r.kt)("p",null,"To format the cell data, use ",(0,r.kt)("inlineCode",{parentName:"p"},"ToString")," method and format strings. Refer: ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types"},"How to format numbers, dates, enums, and other types in .NET")),(0,r.kt)("img",{src:"https://i.imgur.com/MitfasL.png",alt:"Blazor Bootstrap: Grid Component - Cell formating"}),(0,r.kt)("admonition",{title:"EXAMPLE",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},'@context.Salary.ToString("N2")')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{12}","{12}":!0},'<Grid TItem="Employee2" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee2" HeaderText="Id" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Employee Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Salary" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">\n        @context.Salary.ToString("N2")\n    </GridColumn>\n    <GridColumn TItem="Employee2" HeaderText="Active" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee2> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee2>\n        {\n            new Employee2 { Id = 107, Name = "Alice", Designation = "AI Engineer", Salary = 7700, IsActive = true },\n            new Employee2 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", Salary = 19000, IsActive = true },\n            new Employee2 { Id = 106, Name = "John", Designation = "Data Engineer", Salary = 12000, IsActive = true },\n            new Employee2 { Id = 104, Name = "Pop", Designation = "Associate Architect", Salary = 19000, IsActive = false },\n            new Employee2 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", Salary = 16500.50M, IsActive = true },\n            new Employee2 { Id = 102, Name = "Line", Designation = "Architect", Salary = 24000, IsActive = true },\n            new Employee2 { Id = 101, Name = "Daniel", Designation = "Architect", Salary = 21000, IsActive = true },\n            new Employee2 { Id = 108, Name = "Zayne", Designation = "Data Analyst", Salary = 17850, IsActive = true },\n            new Employee2 { Id = 109, Name = "Isha", Designation = "App Maker", Salary = 8000, IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee2>> EmployeesDataProvider(GridDataProviderRequest<Employee2> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#cell-formating"},"See demo here")),(0,r.kt)("h3",{id:"cell-nowrap"},"Cell nowrap"),(0,r.kt)("p",null,"To prevent text from wrapping, add ",(0,r.kt)("inlineCode",{parentName:"p"},'TextNoWrap="true"')," parameter to the GridColumn."),(0,r.kt)("img",{src:"https://i.imgur.com/Wzc3AUF.png",alt:"Blazor Bootstrap: Grid Component - Cell nowrap"}),(0,r.kt)("admonition",{title:"TIP",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'Responsive="true"')," parameter to the grid to enable horizontal scrolling.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{14,17}","{14,17}":!0},'<Grid TItem="Employee3" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" Responsive="true">\n    <GridColumn TItem="Employee3" HeaderText="Id" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="First Name">\n        @context.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="First Name">\n        @context.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Email">\n        @context.Email\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Company" TextNoWrap="true">\n        @context.Company\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Designation" TextNoWrap="true">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Salary" HeaderTextAlignment="Alignment.End" TextAlignment="Alignment.End">\n        @context.Salary.ToString("N2")\n    </GridColumn>\n    <GridColumn TItem="Employee3" HeaderText="Active" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee3> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee3>\n        {\n            new Employee3 { Id = 107, FirstName = "Alice", LastName = "Reddy", Email = "alice@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), Salary = 7700, IsActive = true },\n            new Employee3 { Id = 103, FirstName = "Bob", LastName = "Roy", Email = "bob@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), Salary = 19000, IsActive = true },\n            new Employee3 { Id = 106, FirstName = "John", LastName = "Papa", Email = "john@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), Salary = 12000, IsActive = true },\n            new Employee3 { Id = 104, FirstName = "Pop", LastName = "Two", Email = "pop@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), Salary = 19000, IsActive = false },\n            new Employee3 { Id = 105, FirstName = "Ronald", LastName = "Dire", Email = "ronald@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), Salary = 16500.50M, IsActive = true },\n            new Employee3 { Id = 102, FirstName = "Line", LastName = "K", Email = "line@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), Salary = 24000, IsActive = true },\n            new Employee3 { Id = 101, FirstName = "Daniel", LastName = "Potter", Email = "daniel@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), Salary = 21000, IsActive = true },\n            new Employee3 { Id = 108, FirstName = "Zayne", LastName = "Simmons", Email = "zayne@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), Salary = 17850, IsActive = true },\n            new Employee3 { Id = 109, FirstName = "Isha", LastName = "Davison", Email = "isha@blazorbootstrap.com", Company = "BlazorBootstrap Company", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), Salary = 8000, IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee3>> EmployeesDataProvider(GridDataProviderRequest<Employee3> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#cell-nowrap"},"See demo here")),(0,r.kt)("h3",{id:"pagination-alignment"},"Pagination alignment"),(0,r.kt)("p",null,"Change the alignment of pagination by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"PaginationAlignment")," parameter to the Grid.\nBy default, ",(0,r.kt)("inlineCode",{parentName:"p"},"PaginationAlignment")," is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.Start"),". Other options you can use are ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.Center")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Alignment.End"),"."),(0,r.kt)("img",{src:"https://i.imgur.com/CtSqfJb.png",alt:"Blazor Bootstrap: Grid Component - Pagination alignment"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1}","{1}":!0},'<Grid TItem="Employee1" class="table table-hover table-bordered table-striped table-striped" DataProvider="EmployeesDataProvider" AllowPaging="true" PageSize="5" PaginationAlignment="Alignment.End" Responsive="true">\n    <GridColumn TItem="Employee1" HeaderText="Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Employee Name">\n        @context.Name\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Designation">\n        @context.Designation\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="DOJ">\n        @context.DOJ\n    </GridColumn>\n    <GridColumn TItem="Employee1" HeaderText="Active">\n        @context.IsActive\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee1> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee1>\n        {\n            new Employee1 { Id = 107, Name = "Alice", Designation = "AI Engineer", DOJ = new DateOnly(1998, 11, 17), IsActive = true },\n            new Employee1 { Id = 103, Name = "Bob", Designation = "Senior DevOps Engineer", DOJ = new DateOnly(1985, 1, 5), IsActive = true },\n            new Employee1 { Id = 106, Name = "John", Designation = "Data Engineer", DOJ = new DateOnly(1995, 4, 17), IsActive = true },\n            new Employee1 { Id = 104, Name = "Pop", Designation = "Associate Architect", DOJ = new DateOnly(1985, 6, 8), IsActive = false },\n            new Employee1 { Id = 105, Name = "Ronald", Designation = "Senior Data Engineer", DOJ = new DateOnly(1991, 8, 23), IsActive = true },\n            new Employee1 { Id = 102, Name = "Line", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 101, Name = "Daniel", Designation = "Architect", DOJ = new DateOnly(1977, 1, 12), IsActive = true },\n            new Employee1 { Id = 113, Name = "Merlin", Designation = "Senior Consultant", DOJ = new DateOnly(1989, 10, 2), IsActive = true },\n            new Employee1 { Id = 117, Name = "Sharna", Designation = "Data Analyst", DOJ = new DateOnly(1994, 5, 12), IsActive = true },\n            new Employee1 { Id = 108, Name = "Zayne", Designation = "Data Analyst", DOJ = new DateOnly(1991, 1, 1), IsActive = true },\n            new Employee1 { Id = 109, Name = "Isha", Designation = "App Maker", DOJ = new DateOnly(1996, 7, 1), IsActive = true },\n            new Employee1 { Id = 111, Name = "Glenda", Designation = "Data Engineer", DOJ = new DateOnly(1994, 1, 12), IsActive = true },\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee1>> EmployeesDataProvider(GridDataProviderRequest<Employee1> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#pagination-alignment"},"See demo here")),(0,r.kt)("h3",{id:"empty-data"},"Empty data"),(0,r.kt)("p",null,"If there are no records to display in the Grid, by default, it will display the ",(0,r.kt)("strong",{parentName:"p"},"No records to display")," message.\nYou can change this message by adding the ",(0,r.kt)("inlineCode",{parentName:"p"},"EmptyText")," parameter to the Grid."),(0,r.kt)("img",{src:"https://i.imgur.com/cLuvfmD.png",alt:"Blazor Bootstrap: Grid Component - Empty data"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cshtml",metastring:"{1}","{1}":!0},'<Grid TItem="Employee" class="table table-hover table-bordered table-striped" DataProvider="EmployeesDataProvider" EmptyText="No records to display">\n    <GridColumn TItem="Employee" HeaderText="Id">\n        @context.Id\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="First Name">\n        @context.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Last Name">\n        @context.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee" HeaderText="Designation">\n        @context.Designation\n    </GridColumn>\n</Grid>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"@code {\n    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)\n    {\n        await Task.Delay(3000);\n\n        return (new GridDataProviderResult<Employee> { Data = new List<Employee>(), TotalCount = 0 });\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#empty-data"},"See demo here")),(0,r.kt)("admonition",{title:"TIP",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Add ",(0,r.kt)("inlineCode",{parentName:"p"},'Responsive="true"')," parameter to the grid to enable horizontal scrolling.")))}p.isMDXComponent=!0}}]);