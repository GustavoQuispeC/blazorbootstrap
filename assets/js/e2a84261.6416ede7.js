"use strict";(self.webpackChunkblazorbootstrap=self.webpackChunkblazorbootstrap||[]).push([[7554],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var m=r.createContext({}),d=function(e){var t=r.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=d(e.components);return r.createElement(m.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,m=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,c=u["".concat(m,".").concat(g)]||u[g]||s[g]||l;return n?r.createElement(c,i(i({ref:t},p),{},{components:n})):r.createElement(c,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8888:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return m},metadata:function(){return d},toc:function(){return p},default:function(){return u}});var r=n(7462),a=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_label:"Grid",sidebar_position:6},m="Grid",d={unversionedId:"components/grid",id:"components/grid",isDocsHomePage:!1,title:"Grid",description:"Use BlazorBootstrap's Grid component to display tabular data from the data source. And it supports client-side and server-side paging & sorting.",source:"@site/docs/components/grid.md",sourceDirName:"components",slug:"/components/grid",permalink:"/docs/components/grid",editUrl:"https://github.com/vikramlearning/blazorbootstrap/edit/master/docs/docs/components/grid.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Grid",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Confirm Dialog",permalink:"/docs/components/confirmation-dialog"},next:{title:"Modal",permalink:"/docs/components/modal"}},p=[{value:"Grid Parameters",id:"grid-parameters",children:[],level:2},{value:"GridColumn Parameters",id:"gridcolumn-parameters",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Client side sorting and paging",id:"client-side-sorting-and-paging",children:[],level:3},{value:"Server side sorting and paging",id:"server-side-sorting-and-paging",children:[],level:3},{value:"Empty data",id:"empty-data",children:[],level:3}],level:2}],s={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"grid"},"Grid"),(0,l.kt)("p",null,"Use BlazorBootstrap's Grid component to display tabular data from the data source. And it supports client-side and server-side paging & sorting."),(0,l.kt)("h2",{id:"grid-parameters"},"Grid Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Descritpion"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ChildContent"),(0,l.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the content to be rendered inside the grid."),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"EmptyDataTemplate"),(0,l.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,l.kt)("td",{parentName:"tr",align:null},"Template to render when there are no rows to display."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"No Data."))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DataProvider"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"GridDataProviderDelegate<TItem>")),(0,l.kt)("td",{parentName:"tr",align:null},"DataProvider is for items to render. The provider should always return an instance of ",(0,l.kt)("inlineCode",{parentName:"td"},"GridDataProviderResult"),", and ",(0,l.kt)("inlineCode",{parentName:"td"},"null")," is not allowed."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PageSize"),(0,l.kt)("td",{parentName:"tr",align:null},"int"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets the page size of the grid."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"10")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Sortable"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets whether end-users can sort data by the column's values."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"true")))),(0,l.kt)("h2",{id:"gridcolumn-parameters"},"GridColumn Parameters"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Descritpion"),(0,l.kt)("th",{parentName:"tr",align:null},"Required"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ChildContent"),(0,l.kt)("td",{parentName:"tr",align:null},"RenderFragment"),(0,l.kt)("td",{parentName:"tr",align:null},"Specifies the content to be rendered inside the grid column."),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HeaderText"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets the table column header."),(0,l.kt)("td",{parentName:"tr",align:null},"\u2714\ufe0f"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"IsDefaultSortColumn"),(0,l.kt)("td",{parentName:"tr",align:null},"bool"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets the default sort column."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},"false")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SortDirection"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SortDirection")),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets the default sort direction of a column."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"SortDirection.None"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SortKeySelector"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Expression<Func<TItem, IComparable>>")),(0,l.kt)("td",{parentName:"tr",align:null},"Expression used for sorting."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SortString"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"Gets or sets the column sort string. This string is passed to the backend/API for sorting. And it is ignored for client-side sorting."),(0,l.kt)("td",{parentName:"tr",align:null}),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"client-side-sorting-and-paging"},"Client side sorting and paging"),(0,l.kt)("img",{src:"https://i.imgur.com/0ea5o5X.jpg",alt:"Grid - Client side sorting and paging"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Grid TItem="Employee" class="table table-hover" DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true">\n        @employee.Id\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="FirstName" SortKeySelector="@(item => item.FirstName)">\n        @employee.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="LastName" SortKeySelector="@(item => item.LastName)">\n        @employee.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Designation" SortKeySelector="@(item => item.Designation)">\n        @employee.Designation\n    </GridColumn>\n</Grid>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},'@code {\n    private IEnumerable<Employee> employees;\n\n    protected override void OnInitialized()\n    {\n        employees = new List<Employee>\n        {\n            new Employee { Id = 101, FirstName = "Alice", LastName = "Reddy", Designation = "AI Engineer" },\n            new Employee { Id = 103, FirstName = "Bob", LastName = "Roy", Designation = "Senior DevOps Engineer" },\n            new Employee { Id = 104, FirstName = "John", LastName = "Papa", Designation = "Data Engineer" },\n            new Employee { Id = 105, FirstName = "Pop", LastName = "Two", Designation = "Associate Architect" },\n            new Employee { Id = 104, FirstName = "Ronald", LastName = "Dire", Designation = "Senior Data Engineer" },\n            new Employee { Id = 106, FirstName = "Line", LastName = "K", Designation = "Architect" }\n        };\n    }\n\n    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)\n    {\n        return await Task.FromResult(request.ApplyTo(employees));\n    }\n}\n')),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#client-side-sorting-and-paging"},"See demo here.")),(0,l.kt)("h3",{id:"server-side-sorting-and-paging"},"Server side sorting and paging"),(0,l.kt)("img",{src:"https://i.imgur.com/wrHYKGd.jpg",alt:"Grid - Server side sorting and paging"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Grid TItem="Employee" class="table" DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Id" SortString="Id" SortKeySelector="@(item => item.Id)">\n        @employee.Id\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="FirstName" SortString="FirstName" SortKeySelector="@(item => item.FirstName)" IsDefaultSortColumn="true" SortDirection="SortDirection.Descending">\n        @employee.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="LastName" SortString="LastName" SortKeySelector="@(item => item.LastName)">\n        @employee.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Designation" SortString="Designation" SortKeySelector="@(item => item.Designation)">\n        @employee.Designation\n    </GridColumn>\n</Grid>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"@code {\n    [Inject] public IEmployeeService _employeeService { get; set; }\n\n    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)\n    {\n        var result = _employeeService.GetEmployees(request.PageNumber, request.PageSize, request.Sorting[0].SortString, request.Sorting[0].SortDirection);\n\n        return await Task.FromResult(new GridDataProviderResult<Employee> { Data = result.Item1, TotalCount = result.Item2 });\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#server-side-sorting-and-paging"},"See demo here.")),(0,l.kt)("h3",{id:"empty-data"},"Empty data"),(0,l.kt)("img",{src:"https://i.imgur.com/rCBsMK2.jpg",alt:"Grid - Empty data"}),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cshtml"},'<Grid TItem="Employee" class="table"  DataProvider="EmployeesDataProvider">\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Id" SortKeySelector="@(item => item.Id)" IsDefaultSortColumn="true">\n        @employee.Id\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="FirstName" SortKeySelector="@(item => item.FirstName)">\n        @employee.FirstName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="LastName" SortKeySelector="@(item => item.LastName)">\n        @employee.LastName\n    </GridColumn>\n    <GridColumn TItem="Employee" Context="employee" HeaderText="Designation" SortKeySelector="@(item => item.Designation)">\n        @employee.Designation\n    </GridColumn>\n</Grid>\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cs"},"@code {\n    private async Task<GridDataProviderResult<Employee>> EmployeesDataProvider(GridDataProviderRequest<Employee> request)\n    {\n        await Task.Delay(3000);\n\n        return (new GridDataProviderResult<Employee> { Data = new List<Employee>(), TotalCount = 0 });\n    }\n}\n")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://demos.getblazorbootstrap.com/grid#empty-data"},"See demo here.")))}u.isMDXComponent=!0}}]);